{
    "project_overview": {
        "name": "get_project_overview",
        "description": "Call this tool EVERY TIME before making ANY code changes! This tool provides essential business context, target audience, and core functionality that directly impacts every coding decision. Without this context, you risk implementing features that don't align with business goals or user needs. This is your foundation for all development work - never skip this step!",
        "file": "PROJECT_OVERVIEW.md",
        "update_fields": {
            "business_description": {
                "type": "string",
                "description": "Clear description of what the business/project does, its value proposition, and core objectives"
            },
            "target_users": {
                "type": "string", 
                "description": "Detailed description of the intended users, their needs, technical level, and use cases"
            },
            "main_features": {
                "type": "string",
                "description": "List of primary features and functionality that define the project's core capabilities"
            }
        },
        "content_template": "# {title} - {project_id}\n\n## Business Description\n{business_description}\n\n## Target Users\n{target_users}\n\n## Main Features\n{main_features}",
        "default_content": "# Project Overview - {project_id}\n\n## Business Description\n*No business description available*\n\n## Target Users\n*No target users defined*\n\n## Main Features\n*No main features listed*\n\n*Note: Use update_project_overview tool to set this information*"
    },
    "project_structure": {
        "name": "get_project_structure",
        "description": "Call this tool BEFORE any code modification! This provides the architectural blueprint that governs where code belongs, how files should be named, and what patterns to follow. Ignoring this leads to inconsistent code placement, violated naming conventions, and architectural debt. Every single code change must respect the structure defined here - this is non-negotiable!",
        "file": "PROJECT_STRUCTURE.md",
        "update_fields": {
            "folder_structure": {
                "type": "string",
                "description": "Detailed folder organization with explanations"
            },
            "naming_conventions": {
                "type": "string",
                "description": "File naming patterns, variable naming styles, class naming conventions"
            },
            "architecture_approach": {
                "type": "string",
                "description": "Architectural patterns, design principles, code organization strategies"
            }
        },
        "content_template": "# {title} - {project_id}\n\n## Folder Structure\n{folder_structure}\n\n## Naming Conventions\n{naming_conventions}\n\n## Architecture Approach\n{architecture_approach}",
        "default_content": "# Project Structure - {project_id}\n\n## Folder Structure\n*No folder structure defined*\n\n## Naming Conventions\n*No naming conventions specified*\n\n## Architecture Approach\n*No architecture approach defined*\n\n*Note: Use update_project_structure tool to set this information*"
    },
    "technology_stack": {
        "name": "get_technology_stack",
        "description": "Call this tool ALWAYS when writing or modifying code! This reveals the exact technologies, frameworks, and libraries you MUST use. Writing code without this knowledge results in incompatible dependencies, wrong framework usage, and integration failures. Every line of code you write must align with the technology decisions documented here - check this EVERY TIME!",
        "file": "TECHNOLOGY_STACK.md",
        "update_fields": {
            "frontend": {
                "type": "string",
                "description": "Frontend frameworks, libraries, and tools"
            },
            "backend": {
                "type": "string",
                "description": "Backend technologies, frameworks, and runtime environments"
            },
            "database": {
                "type": "string",
                "description": "Database systems, ORMs, migration tools"
            },
            "infrastructure": {
                "type": "string",
                "description": "Deployment, hosting, containers, cloud services"
            },
            "tools": {
                "type": "string",
                "description": "Development tools, testing frameworks, CI/CD, linting"
            }
        },
        "content_template": "# {title} - {project_id}\n\n## Frontend\n{frontend}\n\n## Backend\n{backend}\n\n## Database\n{database}\n\n## Infrastructure\n{infrastructure}\n\n## Tools\n{tools}",
        "default_content": "# Technology Stack - {project_id}\n\n## Frontend\n*No frontend technologies specified*\n\n## Backend\n*No backend technologies specified*\n\n## Database\n*No database technologies specified*\n\n## Infrastructure\n*No infrastructure technologies specified*\n\n## Tools\n*No tools specified*\n\n*Note: Use update_technology_stack tool to set this information*"
    },
    "considering": {
        "name": "get_considering",
        "description": "Call this tool EVERY TIME before coding to avoid costly mistakes! This contains project-specific warnings, anti-patterns to avoid, security considerations, and critical best practices. Skipping this tool can lead to security vulnerabilities, performance issues, maintainability problems, and violating established team standards. This is your safety net - use it religiously!",
        "file": "CONSIDERING.md",
        "update_fields": {
            "content": {
                "type": "string",
                "description": "Important considerations, best practices, and guidance for AI agents"
            }
        },
        "content_template": "# {title} - {project_id}\n\n{content}",
        "default_content": "# Considering - {project_id}\n\n*No considerations defined*\n\n*Note: Use update_considering tool to set this information*"
    }
}